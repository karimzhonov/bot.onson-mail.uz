from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Update
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import AiogramError
from config import BOT_TOKEN, WEBHOOK_URL, BASE_SITE
from schemas import MessageSchema
from logger import logging

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message()
async def handle_any_message(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üåê –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                web_app=WebAppInfo(url=BASE_SITE)
            )
        ]
    ])

    await message.answer(
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Onson Mail!*\n\n"
        "üì¶ –ö–∞—Ä–≥–æ | ‚úàÔ∏è –¢—É—Ä–∏–∑–º",
        reply_markup=kb
    )


async def feed_update(data):
    update = Update(**data)
    await dp.feed_update(bot, update)


async def set_webhook():
    info = await bot.get_webhook_info()
    if info.url == WEBHOOK_URL:
        return
    await bot.set_webhook(
        WEBHOOK_URL, 
        allowed_updates=dp.resolve_used_update_types(),
        drop_pending_updates=True
    )
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def delete_webhook():
    await bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª—ë–Ω")


async def send_message(message: MessageSchema):
    try:
        await bot.send_message(chat_id=message.chat_id, text=message.text)
        return {'status': 'ok'}
    except AiogramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {'status': 'error'}
